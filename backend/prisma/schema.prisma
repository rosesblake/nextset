generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model amenities {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(50)
  venue_amenities venue_amenities[]
}

model artists {
  id                     Int              @id @default(autoincrement())
  name                   String           @db.VarChar(50)
  instagram_handle       String?          @db.VarChar(50)
  x_handle               String?          @db.VarChar(50)
  facebook_url           String?
  rating_social_media    Float?
  spotify_popular_cities Json?            @db.Json
  rating_streams         Float?
  w9                     String?
  rider                  String?
  manager                String?          @db.VarChar(50)
  record_label           String?          @db.VarChar(50)
  tour_booking_agent     String?          @db.VarChar(50)
  tour_manager           String?          @db.VarChar(50)
  phone                  String?          @db.VarChar(15)
  email                  String?
  created_at             DateTime?        @default(now()) @db.Timestamp(6)
  created_by             Int
  genre                  String?          @db.VarChar(20)
  apple_music_url        String?
  spotify_url            String?
  hometown_city          String?
  hometown_state         String?
  hometown_country       String?
  hometown_lat           Float?
  hometown_lng           Float?
  spotify_followers      Int?
  spotify_photo          String?
  spotify_popularity     Int?
  stage_plot             String?
  spotify_id             String?
  epk                    String?
  live_show_url          String?
  website                String?
  bio                    String?          @db.VarChar(120)
  tiktok                 String?
  soundcloud             String?
  artist_pitches         artist_pitches[]
  users                  artist_users[]
  creator                users            @relation("ArtistCreator", fields: [created_by], references: [id])
  event_artists          event_artists[]
  members                members[]
  tokens                 tokens[]
}

model event_artists {
  event_id  Int
  artist_id Int
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  events    events  @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([event_id, artist_id])
}

model events {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(100)
  venue_id          Int
  event_date        DateTime        @db.Date
  start_time        DateTime        @db.Time(6)
  end_time          DateTime?       @db.Time(6)
  description       String?
  ticket_price      Decimal?        @db.Decimal(10, 2)
  available_tickets Int?
  status            String?         @default("Scheduled") @db.VarChar(20)
  event_artists     event_artists[]
  venues            venues          @relation(fields: [venue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model members {
  id        Int     @id @default(autoincrement())
  artist_id Int
  user_id   Int?    @unique
  name      String  @db.VarChar(30)
  role      String? @db.VarChar(25)
  email     String? @db.VarChar(50)
  phone     String? @db.VarChar(15)
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model artist_pitches {
  pitch_id  Int
  artist_id Int
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pitches   pitches @relation(fields: [pitch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([pitch_id, artist_id])
}

model pitches {
  id                  Int                  @id @default(autoincrement())
  venue_id            Int
  avg_ticket_sales    Int?
  content             String
  status              String               @db.VarChar(15)
  date                DateTime             @db.Date
  role                String
  epk                 String?              @db.VarChar(255)
  rider               String?              @db.VarChar(255)
  stage_plot          String?              @db.VarChar(255)
  w9                  String?              @db.VarChar(255)
  support_acts        Json?
  artist_pitches      artist_pitches[]
  pitch_required_docs pitch_required_docs?
  venues              venues               @relation(fields: [venue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model pitch_required_docs {
  id                  Int     @id @default(autoincrement())
  pitch_id            Int     @unique
  w9_required         Boolean @default(false)
  rider_required      Boolean @default(false)
  epk_required        Boolean @default(false)
  stage_plot_required Boolean @default(false)
  pitches             pitches @relation(fields: [pitch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model schedules {
  id       Int      @id @default(autoincrement())
  venue_id Int
  date     DateTime @db.Date
  venues   venues   @relation(fields: [venue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tokens {
  id             Int       @id @default(autoincrement())
  artist_id      Int
  amount         Int?
  date_purchased DateTime? @db.Date
  date_spent     DateTime? @db.Date
  artists        artists   @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            Int            @id @default(autoincrement())
  password_hash String
  email         String         @unique
  role          String         @default("user") @db.VarChar(20)
  access_level  String         @default("ADMIN") @db.VarChar(20)
  account_type  String         @db.VarChar(20)
  artist_id     Int?
  venue_id      Int?
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  full_name     String         @db.VarChar(50)
  artist_users  artist_users[]
  artists       artists[]      @relation("ArtistCreator")
  members       members?
  venue_users   venue_users[]
  venues        venues[]       @relation("VenueCreator")
}

model venue_amenities {
  venue_id   Int
  amenity_id Int
  amenities  amenities @relation(fields: [amenity_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  venues     venues    @relation(fields: [venue_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([venue_id, amenity_id])
}

model venue_blocked_dates {
  id           Int      @id @default(autoincrement())
  venue_id     Int
  blocked_date DateTime
  venue        venues   @relation(fields: [venue_id], references: [id])

  @@unique([venue_id, blocked_date])
}

model venues {
  id              Int                   @id @default(autoincrement())
  name            String                @unique @db.VarChar(50)
  capacity        Int?
  address         String?               @db.VarChar(50)
  city            String?               @db.VarChar(50)
  state           String?               @db.VarChar(20)
  created_at      DateTime?             @default(now()) @db.Timestamp(6)
  created_by      Int
  zip_code        Int?
  events          events[]
  pitches         pitches[]
  schedules       schedules[]
  venue_amenities venue_amenities[]
  blocked_dates   venue_blocked_dates[]
  users           venue_users[]
  creator         users                 @relation("VenueCreator", fields: [created_by], references: [id])
}

model artist_users {
  user_id   Int
  artist_id Int
  role      String?
  artist    artists @relation(fields: [artist_id], references: [id])
  user      users   @relation(fields: [user_id], references: [id])

  @@id([user_id, artist_id])
}

model venue_users {
  user_id  Int
  venue_id Int
  role     String?
  user     users   @relation(fields: [user_id], references: [id])
  venue    venues  @relation(fields: [venue_id], references: [id])

  @@id([user_id, venue_id])
}
